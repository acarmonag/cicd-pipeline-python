# Nombre del Workflow
name: CI/CD Pipeline AWS ECS con CloudFormation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 1. Despliega el stack base (incluye ECR)
  deploy-cfn-base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Validate CloudFormation Template
        run: aws cloudformation validate-template --region us-east-1 --template-body file://template.yaml

  # 2. Obtiene el URI de ECR y hace build/push de la imagen
  build-test-publish:
    needs: deploy-cfn-base
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
      ecr_uri: ${{ steps.get_ecr_uri.outputs.ecr_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Get ECR Repository URI
        id: get_ecr_uri
        run: |
          echo "ecr_uri=730335351698.dkr.ecr.us-east-1.amazonaws.com/calculadora" >> $GITHUB_OUTPUT

      - name: Set image tag output
        id: set_tag
        run: echo "image_tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Debug image tag in build-test-publish
        run: echo "Image Tag= ${{ steps.set_tag.outputs.image_tag }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pylint (Linter)
        run: pylint app --output-format=text --fail-under=9 > pylint-report.txt || true

      - name: Run Flake8 (Linter)
        run: flake8 app --output-file=flake8-report.txt || true

      - name: Run Unit Tests with pytest and Coverage
        run: |
          pytest --ignore=tests/test_acceptance_app.py --ignore=tests/test_smoke_app.py

      - name: Upload Test Reports Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            htmlcov/
            report.html

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECR_URI="730335351698.dkr.ecr.us-east-1.amazonaws.com/calculadora"
          docker build -t $ECR_URI:$IMAGE_TAG -t $ECR_URI:latest -t $ECR_URI:prod .
          docker push $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:latest
          docker push $ECR_URI:prod

  # -------------------------------------
  # Job de Pruebas de Humo en Producción
  # -------------------------------------
  smoke-test-prod:
    needs: [update-service-prod, deploy-cfn-prod]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
  
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
      - name: Run Smoke Tests against Production
        env:
          APP_BASE_URL: ${{ needs.deploy-cfn-prod.outputs.alb_url_prod }}
        run: |
          echo "Running smoke tests against: $APP_BASE_URL"
          sleep 30
          pytest tests/test_smoke_app.py

      - name: Debug image tag
        run: echo "IMAGE_TAG= ${{ needs.build-test-publish.outputs.image_tag }}"
  
      - name: Retag Image as Stable if Smoke Tests Pass
        if: success()
        run: |
          IMAGE_URI="730335351698.dkr.ecr.us-east-1.amazonaws.com/calculadora:${{ needs.build-test-publish.outputs.image_tag }}"
          STABLE_TAG="730335351698.dkr.ecr.us-east-1.amazonaws.com/calculadora:stable"
          echo "Retagging $IMAGE_URI as $STABLE_TAG"
          aws ecr batch-get-image --repository-name calculadora --image-ids imageTag=${{ needs.build-test-publish.outputs.image_tag }} --region us-east-1 --query 'images[].imageManifest' --output text > imageManifest.json
          aws ecr put-image --repository-name calculadora --image-tag stable --image-manifest file://imageManifest.json --region us-east-1
  # -------------------------------------
  # Job de Rollback automático en caso de fallo en producción
  # -------------------------------------
  rollback-on-failure:
    needs: smoke-test-prod
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
  
      - name: Rollback to Stable Image
        run: |
          echo "Rolling back to stable image"
          STABLE_IMAGE="730335351698.dkr.ecr.us-east-1.amazonaws.com/calculadora:stable"
          aws ecs update-service --cluster calculadora-production-cluster \
            --service calculadora-production-service \
            --force-new-deployment \
            --region us-east-1 \
            --desired-count 1 \
            --task-definition $STABLE_IMAGE
          aws ecs wait services-stable --cluster calculadora-production-cluster --services calculadora-production-service --region us-east-1
          echo "Rollback to stable image complete!"